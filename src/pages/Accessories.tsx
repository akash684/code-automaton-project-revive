import { useState, useEffect } from 'react';
import { Search, Star, ShoppingCart } from 'lucide-react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Card, CardContent } from '@/components/ui/card';
import Navbar from '@/components/Navbar';
import Footer from '@/components/Footer';
import { Accessory } from '@/types';

// GENERATED BY Lovable AI
const Accessories = () => {
  const [accessories, setAccessories] = useState<Accessory[]>([]);
  const [filteredAccessories, setFilteredAccessories] = useState<Accessory[]>([]);
  const [searchTerm, setSearchTerm] = useState('');
  const [selectedCategory, setSelectedCategory] = useState('all');
  const [sortBy, setSortBy] = useState('price-low');
  const [loading, setLoading] = useState(true);

  const formatPrice = (price: number) => {
    return new Intl.NumberFormat('en-IN', {
      style: 'currency',
      currency: 'INR',
      maximumFractionDigits: 0,
    }).format(price);
  };

  const renderStars = (rating: number) => {
    return [...Array(5)].map((_, i) => (
      <Star
        key={i}
        className={`w-4 h-4 ${i < Math.floor(rating) ? 'text-yellow-400 fill-current' : 'text-gray-300'}`}
      />
    ));
  };

  // Mock data
  useEffect(() => {
    const mockAccessories: Accessory[] = [
      {
        id: '1',
        title: 'Premium Car Seat Covers',
        price: 2500,
        category: 'Interior',
        image: 'https://images.unsplash.com/photo-1449965408869-eaa3f722e40d?w=500',
        rating: 4.5,
        brand: 'ComfortMax',
        inStock: true
      },
      {
        id: '2',
        title: 'LED Headlight Bulbs',
        price: 1800,
        category: 'Electronics',
        image: 'https://images.unsplash.com/photo-1558603668-6570496b66f8?w=500',
        rating: 4.8,
        brand: 'BrightLite',
        inStock: true
      },
      {
        id: '3',
        title: 'Car Dashboard Camera',
        price: 8500,
        category: 'Electronics',
        image: 'https://images.unsplash.com/photo-1486312338219-ce68d2c6f44d?w=500',
        rating: 4.3,
        brand: 'SecureCam',
        inStock: true
      },
      {
        id: '4',
        title: 'Bike Phone Mount',
        price: 650,
        category: 'Exterior',
        image: 'https://images.unsplash.com/photo-1558618047-3c8c76ca7d13?w=500',
        rating: 4.2,
        brand: 'RideSecure',
        inStock: true
      },
      {
        id: '5',
        title: 'Premium Floor Mats',
        price: 3200,
        category: 'Interior',
        image: 'https://images.unsplash.com/photo-1503736334956-4c8f8e92946d?w=500',
        rating: 4.6,
        brand: 'FloorGuard',
        inStock: false
      },
      {
        id: '6',
        title: 'Car Air Freshener Set',
        price: 450,
        category: 'Interior',
        image: 'https://images.unsplash.com/photo-1513475382585-d06e58bcb0e0?w=500',
        rating: 4.1,
        brand: 'FreshAir',
        inStock: true
      }
    ];

    setTimeout(() => {
      setAccessories(mockAccessories);
      setFilteredAccessories(mockAccessories);
      setLoading(false);
    }, 800);
  }, []);

  useEffect(() => {
    let filtered = accessories.filter(accessory => {
      const matchesSearch = accessory.title.toLowerCase().includes(searchTerm.toLowerCase()) ||
                          accessory.brand?.toLowerCase().includes(searchTerm.toLowerCase());
      const matchesCategory = selectedCategory === 'all' || accessory.category === selectedCategory;
      return matchesSearch && matchesCategory;
    });

    // Sort accessories
    filtered.sort((a, b) => {
      switch (sortBy) {
        case 'price-low':
          return a.price - b.price;
        case 'price-high':
          return b.price - a.price;
        case 'rating':
          return b.rating - a.rating;
        case 'name':
          return a.title.localeCompare(b.title);
        default:
          return 0;
      }
    });

    setFilteredAccessories(filtered);
  }, [accessories, searchTerm, selectedCategory, sortBy]);

  if (loading) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-blue-50 via-white to-purple-50">
        <Navbar />
        <div className="pt-24 pb-12">
          <div className="container mx-auto px-4">
            <div className="grid md:grid-cols-2 lg:grid-cols-4 gap-6">
              {[...Array(8)].map((_, i) => (
                <Card key={i} className="animate-pulse">
                  <div className="h-48 bg-gray-200"></div>
                  <CardContent className="p-4">
                    <div className="h-4 bg-gray-200 rounded mb-2"></div>
                    <div className="h-6 bg-gray-200 rounded mb-4"></div>
                    <div className="h-4 bg-gray-200 rounded mb-3"></div>
                    <div className="h-10 bg-gray-200 rounded"></div>
                  </CardContent>
                </Card>
              ))}
            </div>
          </div>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-blue-50 via-white to-purple-50">
      <Navbar />
      
      <div className="pt-24 pb-12">
        <div className="container mx-auto px-4">
          {/* Header */}
          <div className="text-center mb-12">
            <h1 className="text-4xl md:text-5xl font-bold text-gray-900 mb-4">
              Auto <span className="text-transparent bg-clip-text bg-gradient-to-r from-blue-600 to-purple-600">Accessories</span>
            </h1>
            <p className="text-xl text-gray-600">Enhance your vehicle with premium accessories</p>
          </div>

          {/* Search and Filters */}
          <div className="mb-8">
            <div className="flex flex-col md:flex-row gap-4 mb-6">
              <div className="relative flex-1">
                <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-5 h-5" />
                <Input
                  placeholder="Search accessories..."
                  value={searchTerm}
                  onChange={(e) => setSearchTerm(e.target.value)}
                  className="pl-10 h-12"
                />
              </div>
              <Select value={selectedCategory} onValueChange={setSelectedCategory}>
                <SelectTrigger className="w-full md:w-48 h-12">
                  <SelectValue placeholder="All Categories" />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="all">All Categories</SelectItem>
                  <SelectItem value="Interior">Interior</SelectItem>
                  <SelectItem value="Exterior">Exterior</SelectItem>
                  <SelectItem value="Electronics">Electronics</SelectItem>
                  <SelectItem value="Maintenance">Maintenance</SelectItem>
                  <SelectItem value="Safety">Safety</SelectItem>
                </SelectContent>
              </Select>
              <Select value={sortBy} onValueChange={setSortBy}>
                <SelectTrigger className="w-full md:w-48 h-12">
                  <SelectValue placeholder="Sort by" />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="price-low">Price: Low to High</SelectItem>
                  <SelectItem value="price-high">Price: High to Low</SelectItem>
                  <SelectItem value="rating">Highest Rated</SelectItem>
                  <SelectItem value="name">Name A-Z</SelectItem>
                </SelectContent>
              </Select>
            </div>
          </div>

          {/* Results */}
          <div className="flex items-center justify-between mb-6">
            <p className="text-gray-600">
              Showing {filteredAccessories.length} of {accessories.length} accessories
            </p>
          </div>

          {/* Accessories Grid */}
          <div className="grid md:grid-cols-2 lg:grid-cols-4 gap-6">
            {filteredAccessories.map((accessory) => (
              <Card key={accessory.id} className="group overflow-hidden hover:shadow-xl transition-all duration-300 hover:-translate-y-1 bg-white border-0 shadow-lg">
                <div className="relative">
                  <img
                    src={accessory.image}
                    alt={accessory.title}
                    className="w-full h-48 object-cover group-hover:scale-105 transition-transform duration-300"
                  />
                  <div className="absolute top-3 left-3 bg-blue-600 text-white px-2 py-1 rounded text-xs font-medium">
                    {accessory.category}
                  </div>
                  {!accessory.inStock && (
                    <div className="absolute inset-0 bg-black/50 flex items-center justify-center">
                      <span className="text-white font-semibold">Out of Stock</span>
                    </div>
                  )}
                </div>
                
                <CardContent className="p-4">
                  <h3 className="font-semibold text-gray-900 mb-2 group-hover:text-blue-600 transition-colors">
                    {accessory.title}
                  </h3>
                  
                  <div className="flex items-center gap-1 mb-2">
                    {renderStars(accessory.rating)}
                    <span className="text-sm text-gray-600 ml-1">({accessory.rating})</span>
                  </div>

                  <div className="text-lg font-bold text-green-600 mb-3">
                    {formatPrice(accessory.price)}
                  </div>

                  <Button 
                    className="w-full bg-gradient-to-r from-blue-600 to-purple-600 hover:from-blue-700 hover:to-purple-700"
                    disabled={!accessory.inStock}
                  >
                    <ShoppingCart className="w-4 h-4 mr-2" />
                    {accessory.inStock ? 'Add to Cart' : 'Out of Stock'}
                  </Button>
                </CardContent>
              </Card>
            ))}
          </div>

          {filteredAccessories.length === 0 && !loading && (
            <div className="text-center py-16">
              <p className="text-xl text-gray-600">No accessories found matching your criteria.</p>
              <Button
                onClick={() => {
                  setSearchTerm('');
                  setSelectedCategory('all');
                  setSortBy('price-low');
                }}
                className="mt-4"
              >
                Clear Filters
              </Button>
            </div>
          )}
        </div>
      </div>

      <Footer />
    </div>
  );
};

export default Accessories;
